name: Release

permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches: [ main ]
    # Alternatively, trigger on a tag:
    # tags: ['v*']

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      # Remove or comment out the GitVersion step if versioning is not needed
      # - name: Install GitVersion (optional)
      #   run: dotnet tool install --global GitVersion.Tool

      # Remove or comment out the version determination and tagging steps
      # - name: Determine version (optional)
      #   id: gitversion
      #   run: |
      #     dotnet gitversion /output json > version.json
      #     cat version.json
      #   env:
      #     DOTNET_CLI_HOME: /tmp

      # - name: Update version (optional)
      #   run: |
      #     echo "Updating version to $(jq -r '.SemVer' version.json)"
      #     # Your custom version bumping script here

      - name: Configure Git for pushing
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Commit version bump
        run: |
          git add .
          git commit -m "chore(release): version bump" || echo "No changes to commit"
          git push

      # Remove or comment out the Git tag creation step
      # - name: Create Git Tag
      #   run: |
      #     VERSION=$(jq -r '.SemVer' version.json)
      #     git tag "v$VERSION"
      #     git push origin "v$VERSION"

      - name: Build and Pack
        run: dotnet pack --configuration Release

      - name: Publish to NuGet
        run: |
          # Find the generated package file (assumes only one .nupkg exists in the folder)
          PACKAGE=$(ls src/Myrtus.Clarity.Generator.Presentation/bin/Release/*.nupkg)
          echo "Publishing package: $PACKAGE"
          dotnet nuget push "$PACKAGE" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
